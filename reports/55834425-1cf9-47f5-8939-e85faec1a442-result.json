{"name": "test_addtocart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF711606CB5+28821]\n\t(No symbol) [0x00007FF711573840]\n\t(No symbol) [0x00007FF71141578A]\n\t(No symbol) [0x00007FF7113EF4F5]\n\t(No symbol) [0x00007FF711496247]\n\t(No symbol) [0x00007FF7114AECE2]\n\t(No symbol) [0x00007FF71148F0A3]\n\t(No symbol) [0x00007FF71145A778]\n\t(No symbol) [0x00007FF71145B8E1]\n\tGetHandleVerifier [0x00007FF71193FCAD+3408013]\n\tGetHandleVerifier [0x00007FF71195741F+3504127]\n\tGetHandleVerifier [0x00007FF71194B5FD+3455453]\n\tGetHandleVerifier [0x00007FF7116CBDBB+835995]\n\t(No symbol) [0x00007FF71157EB5F]\n\t(No symbol) [0x00007FF71157A814]\n\t(No symbol) [0x00007FF71157A9AD]\n\t(No symbol) [0x00007FF71156A199]\n\tBaseThreadInitThunk [0x00007FFE0D79259D+29]\n\tRtlUserThreadStart [0x00007FFE0E12AF38+40]", "trace": "def test_addtocart():\n        driver.find_element(\"id\", \"twotabsearchtextbox\").send_keys(\"iphone 13 128gb\")\n>       driver.find_element(\"id\", \"nav-search-submit-button\").click()\n\ntest_Day10_Amazon.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E053CB1550>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF71156A199]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE0D79259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE0E12AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF711606CB5+28821]\nE       \t(No symbol) [0x00007FF711573840]\nE       \t(No symbol) [0x00007FF71141578A]\nE       \t(No symbol) [0x00007FF7113EF4F5]\nE       \t(No symbol) [0x00007FF711496247]\nE       \t(No symbol) [0x00007FF7114AECE2]\nE       \t(No symbol) [0x00007FF71148F0A3]\nE       \t(No symbol) [0x00007FF71145A778]\nE       \t(No symbol) [0x00007FF71145B8E1]\nE       \tGetHandleVerifier [0x00007FF71193FCAD+3408013]\nE       \tGetHandleVerifier [0x00007FF71195741F+3504127]\nE       \tGetHandleVerifier [0x00007FF71194B5FD+3455453]\nE       \tGetHandleVerifier [0x00007FF7116CBDBB+835995]\nE       \t(No symbol) [0x00007FF71157EB5F]\nE       \t(No symbol) [0x00007FF71157A814]\nE       \t(No symbol) [0x00007FF71157A9AD]\nE       \t(No symbol) [0x00007FF71156A199]\nE       \tBaseThreadInitThunk [0x00007FFE0D79259D+29]\nE       \tRtlUserThreadStart [0x00007FFE0E12AF38+40]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "start": 1733136629649, "stop": 1733136639882, "uuid": "5427fe2e-4341-426d-b623-d938467fa6a7", "historyId": "1d0e8c512b9c75260042bd31469cd4ab", "testCaseId": "1d0e8c512b9c75260042bd31469cd4ab", "fullName": "test_Day10_Amazon#test_addtocart", "labels": [{"name": "suite", "value": "test_Day10_Amazon"}, {"name": "host", "value": "IB-SEZ-LAP-1055"}, {"name": "thread", "value": "25432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Day10_Amazon"}]}